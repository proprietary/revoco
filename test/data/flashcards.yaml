---
version: 1
deck_name: Trivia
card_type: flashcards
cards:
  - prompt: |
      What year is it?
    answer: |
      It's 2020
  - prompt: Who was the first President?
    answer: George Washington
  - prompt: What is the best programming language?
    answer: Common Lisp
---
version: 1
deck_name: C++11 memory model
card_type: flashcards
cards:
  - prompt: atomic_thread_fence
    answer: |
      Establishes memory synchronization ordering of non-atomic and
      relaxed atomic accesses, as instructed by order, without an
      associated atomic operation.
  - prompt: memory_order_relaxed
    answer: |
      Relaxed operation: there are no synchronization or ordering
      constraints imposed on other reads or writes, only this
      operation's atomicity is guaranteed (see Relaxed ordering below)
  - prompt: memory_order_consume
    answer: |
      A load operation with this memory order performs a consume
      operation on the affected memory location: no reads or writes in
      the current thread dependent on the value currently loaded can
      be reordered before this load. Writes to data-dependent
      variables in other threads that release the same atomic variable
      are visible in the current thread. On most platforms, this
      affects compiler optimizations only (see Release-Consume
      ordering below)
  - prompt: memory_order_acquire
    answer: |
       A load operation with this memory order performs the acquire
       operation on the affected memory location: no reads or writes
       in the current thread can be reordered before this load. All
       writes in other threads that release the same atomic variable
       are visible in the current thread (see Release-Acquire ordering
       below)
  - prompt:  memory_order_release
    answer: |
       A store operation with this memory order performs the release
       operation: no reads or writes in the current thread can be
       reordered after this store. All writes in the current thread
       are visible in other threads that acquire the same atomic
       variable (see Release-Acquire ordering below) and writes that
       carry a dependency into the atomic variable become visible in
       other threads that consume the same atomic (see Release-Consume
       ordering below).
  - prompt: memory_order_acq_rel
    answer: |
      A read-modify-write operation with this memory order is both an
      acquire operation and a *release operation*. No memory reads or
      writes in the current thread can be reordered before or after
      this store. All writes in other threads that release the same
      atomic variable are visible before the modification and the
      modification is visible in other threads that acquire the same
      atomic variable.
  - prompt: memory_order_seq_cst
    answer: |
       A load operation with this memory order performs an acquire
       operation, a store performs a release operation, and
       read-modify-write performs both an acquire operation and a
       release operation, plus a single total order exists in which
       all threads observe all modifications in the same order (see
       Sequentially-consistent ordering below)
...
